/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import com.google.zxing.WriterException;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.TargetDataLine;
import javax.swing.*;
import java.awt.*;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.*;

/**
 *
 * @author abdellah
 */
public class RemoteAppGUI extends javax.swing.JFrame {
    public static String log;
    public static String phoneIp;
    private static int localx=500;
    private static int localy=500;
    /**
     * Creates new form RemoteAppGUI
     */
    public RemoteAppGUI() throws IOException, WriterException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws IOException, WriterException {

        panel1 = new CustomJPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(400, 400));

        panel1.setBackground(new java.awt.Color(36, 36, 36));

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        BufferedImage qrcode = DesktopRemoteApp.getQr();
        panel1.setImage(qrcode);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RemoteAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RemoteAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RemoteAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RemoteAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new RemoteAppGUI().setVisible(true);
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (WriterException e) {
                    e.printStackTrace();
                }
            }
        });


        // Keyboard Thread.
        new Thread() {

            Socket s;
            ServerSocket ss;
            InputStreamReader isr;
            BufferedReader br;
            String message;
            DataOutputStream osr;
            float x;
            float y;
            String h;
            String w;
            int k;

            public void run() {
                try{
                    Robot robot = new Robot();
                    ss = new ServerSocket(20000);

                    while(true){
                        s= ss.accept();
                        isr = new InputStreamReader(s.getInputStream());

                        br = new BufferedReader(isr);

                        message = br.readLine();

                        k=Integer.parseInt(message);
                        switch (k) {
                            //NUMBERS
                            case 0 -> {
                                robot.keyPress(KeyEvent.VK_0);
                                robot.keyRelease(KeyEvent.VK_0);
                            }
                            case 1 -> {
                                robot.keyPress(KeyEvent.VK_1);
                                robot.keyRelease(KeyEvent.VK_1);
                            }
                            case 2 -> {
                                robot.keyPress(KeyEvent.VK_2);
                                robot.keyRelease(KeyEvent.VK_2);
                            }
                            case 3 -> {
                                robot.keyPress(KeyEvent.VK_3);
                                robot.keyRelease(KeyEvent.VK_3);
                            }
                            case 4 -> {
                                robot.keyPress(KeyEvent.VK_4);
                                robot.keyRelease(KeyEvent.VK_4);
                            }
                            case 5 -> {
                                robot.keyPress(KeyEvent.VK_5);
                                robot.keyRelease(KeyEvent.VK_5);
                            }
                            case 6 -> {
                                robot.keyPress(KeyEvent.VK_6);
                                robot.keyRelease(KeyEvent.VK_6);
                            }
                            case 7 -> {
                                robot.keyPress(KeyEvent.VK_7);
                                robot.keyRelease(KeyEvent.VK_7);
                            }
                            case 8 -> {
                                robot.keyPress(KeyEvent.VK_8);
                                robot.keyRelease(KeyEvent.VK_8);
                            }
                            case 9 -> {
                                // CHARACTERS
                                robot.keyPress(KeyEvent.VK_9);
                                robot.keyRelease(KeyEvent.VK_9);
                            }
                            case 97 -> {
                                robot.keyPress(KeyEvent.VK_A);
                                robot.keyRelease(KeyEvent.VK_A);
                            }
                            case 98 -> {
                                robot.keyPress(KeyEvent.VK_B);
                                robot.keyRelease(KeyEvent.VK_B);
                            }
                            case 99 -> {
                                robot.keyPress(KeyEvent.VK_C);
                                robot.keyRelease(KeyEvent.VK_C);
                            }
                            case 100 -> {
                                robot.keyPress(KeyEvent.VK_D);
                                robot.keyRelease(KeyEvent.VK_D);
                            }
                            case 101 -> {
                                robot.keyPress(KeyEvent.VK_E);
                                robot.keyRelease(KeyEvent.VK_E);
                            }
                            case 102 -> {
                                robot.keyPress(KeyEvent.VK_F);
                                robot.keyRelease(KeyEvent.VK_F);
                            }
                            case 103 -> {
                                robot.keyPress(KeyEvent.VK_G);
                                robot.keyRelease(KeyEvent.VK_G);
                            }
                            case 104 -> {
                                robot.keyPress(KeyEvent.VK_H);
                                robot.keyRelease(KeyEvent.VK_H);
                            }
                            case 105 -> {
                                robot.keyPress(KeyEvent.VK_I);
                                robot.keyRelease(KeyEvent.VK_I);
                            }
                            case 106 -> {
                                robot.keyPress(KeyEvent.VK_J);
                                robot.keyRelease(KeyEvent.VK_J);
                            }
                            case 107 -> {
                                robot.keyPress(KeyEvent.VK_K);
                                robot.keyRelease(KeyEvent.VK_K);
                            }
                            case 108 -> {
                                robot.keyPress(KeyEvent.VK_L);
                                robot.keyRelease(KeyEvent.VK_L);
                            }
                            case 109 -> {
                                robot.keyPress(KeyEvent.VK_M);
                                robot.keyRelease(KeyEvent.VK_M);
                            }
                            case 110 -> {
                                robot.keyPress(KeyEvent.VK_N);
                                robot.keyRelease(KeyEvent.VK_N);
                            }
                            case 111 -> {
                                robot.keyPress(KeyEvent.VK_O);
                                robot.keyRelease(KeyEvent.VK_O);
                            }
                            case 112 -> {
                                robot.keyPress(KeyEvent.VK_P);
                                robot.keyRelease(KeyEvent.VK_P);
                            }
                            case 113 -> {
                                robot.keyPress(KeyEvent.VK_Q);
                                robot.keyRelease(KeyEvent.VK_Q);
                            }
                            case 114 -> {
                                robot.keyPress(KeyEvent.VK_R);
                                robot.keyRelease(KeyEvent.VK_R);
                            }
                            case 115 -> {
                                robot.keyPress(KeyEvent.VK_S);
                                robot.keyRelease(KeyEvent.VK_S);
                            }
                            case 116 -> {
                                robot.keyPress(KeyEvent.VK_T);
                                robot.keyRelease(KeyEvent.VK_T);
                            }
                            case 117 -> {
                                robot.keyPress(KeyEvent.VK_U);
                                robot.keyRelease(KeyEvent.VK_U);
                            }
                            case 118 -> {
                                robot.keyPress(KeyEvent.VK_V);
                                robot.keyRelease(KeyEvent.VK_V);
                            }
                            case 119 -> {
                                robot.keyPress(KeyEvent.VK_W);
                                robot.keyRelease(KeyEvent.VK_W);
                            }
                            case 120 -> {
                                robot.keyPress(KeyEvent.VK_X);
                                robot.keyRelease(KeyEvent.VK_X);
                            }
                            case 121 -> {
                                robot.keyPress(KeyEvent.VK_Y);
                                robot.keyRelease(KeyEvent.VK_Y);
                            }
                            case 122 -> {
                                robot.keyPress(KeyEvent.VK_Z);
                                robot.keyRelease(KeyEvent.VK_Z);
                            }
                            //ACTIONS
                            case 10 -> {
                                robot.keyPress(KeyEvent.VK_BACK_SPACE);
                                robot.keyRelease(KeyEvent.VK_BACK_SPACE);
                            }
                            case 13 -> {
                                robot.keyPress(KeyEvent.VK_ENTER);
                                robot.keyRelease(KeyEvent.VK_ENTER);
                            }
                            case 32 -> {
                                robot.keyPress(KeyEvent.VK_SPACE);
                                robot.keyRelease(KeyEvent.VK_SPACE);
                            }
                            case 16 -> {
                                robot.keyPress(KeyEvent.VK_SHIFT);
                                robot.keyRelease(KeyEvent.VK_SHIFT);
                            }
                            //characters
                            case 93 -> {
                                robot.keyPress(KeyEvent.VK_CLOSE_BRACKET);
                                robot.keyRelease(KeyEvent.VK_CLOSE_BRACKET);
                            }
                            case 45 -> {
                                robot.keyPress(KeyEvent.VK_MINUS);
                                robot.keyRelease(KeyEvent.VK_MINUS);
                            }
                            case 43 -> {
                                robot.keyPress(KeyEvent.VK_ADD);
                                robot.keyRelease(KeyEvent.VK_ADD);
                            }
                            case 42 -> {
                                robot.keyPress(KeyEvent.VK_MULTIPLY);
                                robot.keyRelease(KeyEvent.VK_MULTIPLY);
                            }
                            case 58 -> {
                                robot.keyPress(KeyEvent.VK_COLON);
                                robot.keyRelease(KeyEvent.VK_COLON);
                            }
                            case 46 -> {
                                robot.keyPress(KeyEvent.VK_PERIOD);
                                robot.keyRelease(KeyEvent.VK_PERIOD);
                            }
                            case 44 -> {
                                robot.keyPress(KeyEvent.VK_COMMA);
                                robot.keyRelease(KeyEvent.VK_COMMA);
                            }
                            case 59 -> {
                                robot.keyPress(KeyEvent.VK_SEMICOLON);
                                robot.keyRelease(KeyEvent.VK_SEMICOLON);
                            }
                            case 61 -> {
                                robot.keyPress(KeyEvent.VK_EQUALS);
                                robot.keyRelease(KeyEvent.VK_EQUALS);
                            }
                            case 39 -> {
                                robot.keyPress(KeyEvent.VK_QUOTE);
                                robot.keyRelease(KeyEvent.VK_QUOTE);
                            }
                            case 34 -> {
                                robot.keyPress(KeyEvent.VK_QUOTEDBL);
                                robot.keyRelease(KeyEvent.VK_QUOTEDBL);
                            }
                            case 47 -> {
                                robot.keyPress(KeyEvent.VK_SLASH);
                                robot.keyRelease(KeyEvent.VK_SLASH);
                            }
                            case 91 -> {
                                robot.keyPress(KeyEvent.VK_OPEN_BRACKET);
                                robot.keyRelease(KeyEvent.VK_OPEN_BRACKET);
                            }
                            case 62 -> {
                                robot.keyPress(KeyEvent.VK_GREATER);
                                robot.keyRelease(KeyEvent.VK_GREATER);
                            }
                            case 60 -> {
                                robot.keyPress(KeyEvent.VK_LESS);
                                robot.keyRelease(KeyEvent.VK_LESS);
                            }
                        }
                    }

                }
                catch(IOException | AWTException e){
                    e.printStackTrace();
                }
            }
        }.start();

        // Mouse Thread.
        new Thread(){
            Socket s;
            ServerSocket ss;
            InputStreamReader isr;
            BufferedReader br;
            String message;
            DataOutputStream osr;
            int x;
            int y;

            public void run(){
                try{
                    ss = new ServerSocket(9999);
                    Robot robot = new Robot();

                    while(true){
                        s= ss.accept();

                        isr = new InputStreamReader(s.getInputStream());
                        osr = new DataOutputStream(s.getOutputStream());
                        br = new BufferedReader(isr);

                        message = br.readLine();

                        if(message.equals("1")){
                            robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);
                            robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);
                        }
                        else if(message.equals("2")){
                            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
                            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);
                        }
                        else{
                            String[] array = message.split("/");

                            localy +=(Integer.valueOf(array[0])) / 80;
                            localx +=Integer.valueOf(array[1]) / 80;

                            if(localx > 1920){localx = 1920;}
                            if(localx < 0){localx = 0;}
                            if(localy > 1080){localy = 1080;}
                            if(localy < 0){localy = 0;}
                            robot.mouseMove((int)localx,(int)localy);
                        }
                    }
                }
                catch(AWTException | IOException e){e.printStackTrace();
                }

            }
        }.start();

        new Thread(){
            ServerSocket ss;
            Socket s;
            InputStreamReader is;
            public void run() {
                try {

                    ss = new ServerSocket(7777);
                    s = ss.accept();
                    is = new InputStreamReader(s.getInputStream());
                    RemoteAppGUI.phoneIp = new BufferedReader(is).readLine();
                    new Thread(() -> {
                        TargetDataLine line;
                        DatagramPacket dgp;

                        AudioFormat.Encoding encoding = AudioFormat.Encoding.PCM_SIGNED;
                        float rate = 48000f;
                        int channel = 1;
                        int sampleSize = 16;
                        boolean bigEndian = false;

                        int BUF_SIZE = 5 * 5 * sampleSize * 2;

                        AudioFormat format = new AudioFormat(encoding, rate, sampleSize, channel, (sampleSize / 8) * channel, rate, bigEndian);

                        DataLine.Info info = new DataLine.Info(TargetDataLine.class,format);

                        try {
                            line = (TargetDataLine) AudioSystem.getLine(info);
                            line.open(format);
                            line.start();
                            byte[] data = new byte[BUF_SIZE];

                            InetAddress address = InetAddress.getByName(RemoteAppGUI.phoneIp);
                            DatagramSocket socket = new DatagramSocket();
                            while(true){
                                line.read(data,0,BUF_SIZE);
                                dgp = new DatagramPacket(data, BUF_SIZE,address,50005);
                                socket.send(dgp);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }).start();

                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        }.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private CustomJPanel panel1;
    // End of variables declaration//GEN-END:variables
}

class CustomJPanel extends JPanel {

    BufferedImage image = null;

    public CustomJPanel() {
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(image, 0, 0, this.getWidth(), this.getHeight(), this);
    }

    public void setImage(BufferedImage image) {
        this.image = image;
        repaint();
    }
}